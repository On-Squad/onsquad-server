plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.asciidoctor.jvm.convert' version "3.3.2"
}

group = 'revi1337'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    implementation 'com.querydsl:querydsl-sql:5.1.0'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'com.blazebit:blaze-persistence-integration-querydsl-expressions-jakarta:1.6.11'

    implementation 'com.blazebit:blaze-persistence-integration-hibernate-6.2:1.6.11'
    implementation 'com.blazebit:blaze-persistence-core-impl-jakarta:1.6.11'

    implementation platform('software.amazon.awssdk:bom:2.31.17')
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:cloudfront'

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testImplementation 'com.redis.testcontainers:testcontainers-redis-junit:1.6.4'
    testImplementation "org.testcontainers:localstack:1.19.0"

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'net.jodah:expiringmap:0.5.10'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.2.0'
}

String ENABLE_PREVIEW = "--enable-preview"
String PARAMETERS = "-parameters"

def gradleProfile = project.hasProperty("profile") ?
        project.property("profile").toString() : "test"

ext {
    applicationName = 'onsquad'
    snippetsDir = file('build/generated-snippets')
}

test {
    jvmArgs(ENABLE_PREVIEW)
    systemProperty("spring.profiles.active", gradleProfile)
    useJUnitPlatform()
    outputs.dir snippetsDir
}

asciidoctor.doFirst {
    delete file('src/main/resources/static')
}

asciidoctor {
    dependsOn test
    configurations 'asciidoctorExt'
    inputs.dir snippetsDir
    baseDirFollowsSourceFile()
    sources {
        include('**/index.adoc')
    }
}

tasks.register('copyDocsToStatic', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static")
}

bootJar {
    dependsOn copyDocsToStatic
    from("${asciidoctor.outputDir}") {
        into 'static'
    }
    archivesBaseName = applicationName
    archiveFileName = applicationName + '.jar'
    archiveVersion = "0.0.1"
}

jar {
    enabled = false
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add(ENABLE_PREVIEW)
    options.compilerArgs.add(PARAMETERS)
}
